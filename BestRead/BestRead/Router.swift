
//Generated by script
    
import UIKit

extension UIViewController {
    static func create(_ block: () -> UIViewController) -> UIViewController {
        return block()
    }
}

extension RouterKey {
    func viewController(with args: [String: Any?]? = nil) -> UIViewController {
        let router = routerMap[self]!
        let vc = router.t.create(router.m)
        if let args = args {
            for (key, value) in args {
                vc.setValue(value, forKey: key)
            }
        }
        return vc
    }
    static subscript(_ str: String) -> RouterKey? {
        return RouterKey(rawValue: str)
    }
}

enum RouterKey: String, CaseIterable {
    case page$main
    case page$sub

    init?(rawValue: String) {
        let rs = rawValue.replacingOccurrences(of: "/", with: "$")
        for item in RouterKey.allCases {
            if item.rawValue == rs {
                self = item
                return
            }
        }
        return nil
    }
}

let routerMap: [RouterKey: (t: UIViewController.Type, m: () -> UIViewController)] =
    [
        .page$main: (MainViewController.self, MainViewController.init),
        .page$sub: (SubViewController.self, SubViewController.fromStoryboard),

    ]
    