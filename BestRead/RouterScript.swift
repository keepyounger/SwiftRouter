#!/usr/bin/env swift

import Foundation

start(with: CommandLine.arguments)

func start(with args:[String]) {
    guard let path = args.last else {
        print("目录为空")
        exit(0)
    }
    print(path)
    
    var topStr =
        """
        
        //Generated by script
            
        import UIKit
        
        extension UIViewController {
            static func create(_ block: () -> UIViewController) -> UIViewController {
                return block()
            }
        }
        
        extension RouterKey {
            func viewController(with args: [String: Any?]? = nil) -> UIViewController {
                let router = routerMap[self]!
                let vc = router.t.create(router.m)
                if let args = args {
                    for (key, value) in args {
                        vc.setValue(value, forKey: key)
                    }
                }
                return vc
            }
            static subscript(_ str: String) -> RouterKey? {
                return RouterKey(rawValue: str)
            }
        }
        
        """
    
    var keys = [String]()
    var types = [String]()
    var methods = [String?]()
    
    for item in pathes(for: path) {
        if let content = try? String.init(contentsOfFile: item) {
            
            var reg = try! NSRegularExpression(pattern: "/// *Router *\\( *\"([^,]+)\" *, *\"([^,]+)\" *, *\"([^,]+)\" *\\)", options: .caseInsensitive)
            reg.enumerateMatches(in: content, options: .reportProgress, range: NSRange(location: 0, length: content.count)) { (rs, item, flag) in
                if let rs = rs {
                    let content = content as NSString
                    keys.append(content.substring(with: rs.range(at: 1)).replacingOccurrences(of: "/", with: "$"))
                    types.append(content.substring(with: rs.range(at: 2)))
                    methods.append(content.substring(with: rs.range(at: 3)))
                }
            }
            
            reg = try! NSRegularExpression(pattern: "/// *Router *\\( *\"([^,]+)\" *, *\"([^,]+)\" *\\)", options: .caseInsensitive)
            reg.enumerateMatches(in: content, options: .reportProgress, range: NSRange(location: 0, length: content.count)) { (rs, item, flag) in
                if let rs = rs {
                    let content = content as NSString
                    keys.append(content.substring(with: rs.range(at: 1)).replacingOccurrences(of: "/", with: "$"))
                    types.append(content.substring(with: rs.range(at: 2)))
                    methods.append(nil)
                }
            }
        }
    }
    
    var keyStr = ""
    for key in keys {
        keyStr += "    case \(key)\n"
    }
    
    var enumStr =
        """
        
        enum RouterKey: String, CaseIterable {
        \(keyStr)
            init?(rawValue: String) {
                let rs = rawValue.replacingOccurrences(of: "/", with: "$")
                for item in RouterKey.allCases {
                    if item.rawValue == rs {
                        self = item
                        return
                    }
                }
                return nil
            }
        }
        
        """
    
    var routerMapStr = ""
    for i in 0..<keys.count {
        var key = keys[i]
        var type = types[i]
        var method = methods[i] ?? "init"
        routerMapStr += "        .\(key): (\(type).self, \(type).\(method)),\n"
    }
    
    var routerMap =
        """
        
        let routerMap: [RouterKey: (t: UIViewController.Type, m: () -> UIViewController)] =
            [
        \(routerMapStr)
            ]
            
        """
    
    var routerPath = ((path as NSString).appendingPathComponent((path as NSString).lastPathComponent) as NSString).appendingPathComponent("Router.swift")
    try? FileManager.default.removeItem(atPath: routerPath)
    
    var rs = topStr + enumStr + routerMap
    if keys.count == 0 {
        rs = "//Generated by script"
    }
    try? rs.write(toFile: routerPath, atomically: true, encoding: .utf8)
    
}

func pathes(for path: String) -> [String] {
    var temp = [String]()
    guard let ps = try? FileManager.default.contentsOfDirectory(atPath: path) else {
        return temp
    }
    
    for item in ps {
        let p = (path as NSString).appendingPathComponent(item)
        var flag: ObjCBool = false
        if FileManager.default.fileExists(atPath: p, isDirectory: &flag) && flag.boolValue {
            temp.append(contentsOf: pathes(for: p))
        } else if p.hasSuffix(".swift") {
            temp.append(p)
        }
    }
    return temp
}


